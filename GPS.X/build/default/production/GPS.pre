
# 1 "GPS.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\__size_t.h"
typedef unsigned size_t;

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 34
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 9 "GPS.h"
struct _GPS {
char latitude[10];
char longitude[11];
char lat_cardinal;
char lon_cardinal;
};
typedef struct _GPS GPS;
extern int _GPS_location_avail;

void (*_UartInit)();
unsigned char (*_UartReceiveByte)();
void (*_UartSendByte)(unsigned char);
void _GPSInit();
void _GPSRoutines();
GPS _GPSValues();

# 3 "GPS.c"
int _GPS_location_avail = 0;

GPS gps;
int rec_count = 0;


char UartBuffer[45];

void (*_UartInit)();
unsigned char (*_UartReceiveByte)();
void (*_UartSendByte)(unsigned char);

void _GPSRoutines(){
int i = 0;
char x = _UartReceiveByte();
if(x=='$')
rec_count =0;
UartBuffer[rec_count++] = x;
UartBuffer[rec_count] = '\0';
if(UartBuffer[0] == '$' && rec_count <= 42){
if(rec_count == 42 && UartBuffer[3] == 'G' && UartBuffer[4] == 'G' && UartBuffer[5] == 'A' ){
gps.lat_cardinal = UartBuffer[28];
gps.lon_cardinal = UartBuffer[41];
for(i=0;i<9;i++)
gps.latitude[i] = UartBuffer[i+18];
gps.latitude[i] = '\0';
for(i=0;i<10;i++)
gps.longitude[i] = UartBuffer[i+30];
gps.longitude[i] = '\0';
_GPS_location_avail = 1;
}
}else{
rec_count = 0;
UartBuffer[rec_count] = '\0';
_GPS_location_avail = 0;
}

}

void _GPSInit(){
_UartInit();
rec_count =0;
}

GPS _GPSValues(){
_GPS_location_avail = 0;
rec_count = 0;
UartBuffer[rec_count] = '\0';
return gps;
}
